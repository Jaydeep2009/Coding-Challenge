public class FibonacciDP {

    // Bottom-Up DP approach (Tabulation)
    public static int fibonacciDP(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;

        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];
    }

    // Optimized DP approach (O(1) space)
    public static int fibonacciOptimized(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;

        int prev2 = 0, prev1 = 1;
        int curr = 0;

        for (int i = 2; i <= n; i++) {
            curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }

        return curr;
    }

    public static void main(String[] args) {
        int n = 5;  // Example Input
        System.out.println("Fibonacci using DP: " + fibonacciDP(n));        // Output: 5
        System.out.println("Fibonacci Optimized: " + fibonacciOptimized(n)); // Output: 5
    }
}
